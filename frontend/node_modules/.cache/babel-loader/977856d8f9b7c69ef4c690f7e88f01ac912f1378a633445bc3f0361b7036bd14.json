{"ast":null,"code":"import Keycloak from 'keycloak-js';\nwindow.addEventListener(\"message\", event => {\n  console.log(\"\\ud83d\\udc40 Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n  try {\n    const url = new URL(window.location.href);\n    // Remove any query parameters that might interfere with Keycloak\n    url.search = '';\n    url.hash = '';\n    return url.toString();\n  } catch (error) {\n    console.error('Failed to parse current URL:', error);\n    // Fallback to using origin with path\n    const origin = window.location.origin;\n    const path = window.location.pathname;\n    return `${origin}${path}`;\n  }\n};\n\n// Ensure URL is a string\nconst ensureStringUrl = url => {\n  if (typeof url === 'string') {\n    return url;\n  }\n  if (url instanceof URL) {\n    return url.toString();\n  }\n  if (typeof url === 'object' && url.origin) {\n    return `${url.origin}${url.pathname || ''}`;\n  }\n  console.warn('Invalid URL format:', url);\n  return window.location.origin;\n};\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app',\n  redirectUri: ensureStringUrl(getCurrentUrl()),\n  onLoad: 'check-sso',\n  silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n  pkceMethod: 'S256',\n  checkLoginIframe: false,\n  enableLogging: true,\n  flow: 'standard'\n};\nlet keycloakInstance = null;\nlet initializationState = {\n  initialized: false,\n  inProgress: false,\n  error: null\n};\nconst handleInitError = (error, config) => {\n  const errorDetails = {\n    message: 'Unknown error during Keycloak initialization',\n    details: 'No error object was provided',\n    config: config\n  };\n  if (!error) {\n    errorDetails.details = 'Initialization failed without error object';\n    return errorDetails;\n  }\n  try {\n    // Try to get error details from the error object\n    errorDetails.message = error.message || error.toString() || 'Unknown error';\n    errorDetails.details = error.stack || error.toString();\n    errorDetails.code = error.code;\n\n    // Check for network errors\n    if (error.message && error.message.includes('Failed to fetch')) {\n      errorDetails.serverUnavailable = true;\n      errorDetails.suggestions = ['Make sure the Keycloak server is running at ' + config.url, 'Check network connectivity', 'Verify that CORS is properly configured on the Keycloak server', 'Ensure the realm \"' + config.realm + '\" exists'];\n    }\n\n    // Check for nonce errors\n    if (error.message && error.message.includes('Invalid nonce')) {\n      errorDetails.nonceError = true;\n      errorDetails.suggestions = ['Clear browser cookies and local storage', 'Try using a different authentication flow', 'Check if Keycloak client has \"Standard Flow\" enabled', 'Verify that the redirect URI is correctly configured in Keycloak'];\n    }\n  } catch (e) {\n    errorDetails.details = 'Error object could not be processed';\n  }\n\n  // Add configuration details\n  errorDetails.config = {\n    url: ensureStringUrl(config.url),\n    realm: config.realm,\n    clientId: config.clientId,\n    redirectUri: ensureStringUrl(config.redirectUri),\n    flow: config.flow\n  };\n  return errorDetails;\n};\nconst initKeycloak = async () => {\n  if (initializationState.inProgress) {\n    throw new Error('Keycloak initialization already in progress');\n  }\n  if (initializationState.initialized) {\n    return keycloakInstance;\n  }\n  initializationState.inProgress = true;\n  try {\n    // Clear any stale tokens from localStorage\n    const storagePrefix = `kc-callback-${keycloakConfig.clientId}`;\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key && key.startsWith(storagePrefix)) {\n        console.log('Removing stale callback data:', key);\n        localStorage.removeItem(key);\n      }\n    }\n    console.log('Initializing Keycloak with config:', JSON.stringify(keycloakConfig, null, 2));\n    keycloakInstance = new Keycloak(keycloakConfig);\n\n    // Add event listeners for debugging\n    keycloakInstance.onAuthSuccess = () => {\n      console.log('Keycloak: Authentication successful');\n    };\n    keycloakInstance.onAuthError = errorData => {\n      console.error('Keycloak: Authentication error:', errorData);\n    };\n    keycloakInstance.onTokenExpired = () => {\n      console.log('Keycloak: Token expired');\n    };\n\n    // Ensure all URLs are strings before initialization\n    const initOptions = {\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri: ensureStringUrl(keycloakConfig.silentCheckSsoRedirectUri),\n      pkceMethod: 'S256',\n      checkLoginIframe: false,\n      enableLogging: true,\n      flow: 'standard'\n    };\n    console.log('Calling keycloak.init with options:', JSON.stringify(initOptions, null, 2));\n    const authenticated = await keycloakInstance.init(initOptions);\n    console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n    initializationState.initialized = true;\n    initializationState.error = null;\n    return keycloakInstance;\n  } catch (error) {\n    console.error('Original error object:', error);\n    const processedError = handleInitError(error, keycloakConfig);\n    initializationState.error = processedError;\n    console.error('Keycloak initialization failed:', {\n      error: processedError,\n      timestamp: new Date().toISOString()\n    });\n    throw processedError;\n  } finally {\n    initializationState.inProgress = false;\n  }\n};\nconst getKeycloak = () => {\n  if (!initializationState.initialized) {\n    throw new Error('Keycloak has not been initialized yet');\n  }\n  return keycloakInstance;\n};\nconst getInitializationState = () => initializationState;\nexport { initKeycloak, getKeycloak, getInitializationState };","map":{"version":3,"names":["Keycloak","window","addEventListener","event","console","log","data","getCurrentUrl","url","URL","location","href","search","hash","toString","error","origin","path","pathname","ensureStringUrl","warn","keycloakConfig","realm","clientId","redirectUri","onLoad","silentCheckSsoRedirectUri","pkceMethod","checkLoginIframe","enableLogging","flow","keycloakInstance","initializationState","initialized","inProgress","handleInitError","config","errorDetails","message","details","stack","code","includes","serverUnavailable","suggestions","nonceError","e","initKeycloak","Error","storagePrefix","i","localStorage","length","key","startsWith","removeItem","JSON","stringify","onAuthSuccess","onAuthError","errorData","onTokenExpired","initOptions","authenticated","init","processedError","timestamp","Date","toISOString","getKeycloak","getInitializationState"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\nwindow.addEventListener(\"message\", (event) => {\n    console.log(\"\\ud83d\\udc40 Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n    try {\n        const url = new URL(window.location.href);\n        // Remove any query parameters that might interfere with Keycloak\n        url.search = '';\n        url.hash = '';\n        return url.toString();\n    } catch (error) {\n        console.error('Failed to parse current URL:', error);\n        // Fallback to using origin with path\n        const origin = window.location.origin;\n        const path = window.location.pathname;\n        return `${origin}${path}`;\n    }\n};\n\n\n// Ensure URL is a string\nconst ensureStringUrl = (url) => {\n    if (typeof url === 'string') {\n        return url;\n    }\n    if (url instanceof URL) {\n        return url.toString();\n    }\n    if (typeof url === 'object' && url.origin) {\n        return `${url.origin}${url.pathname || ''}`;\n    }\n    console.warn('Invalid URL format:', url);\n    return window.location.origin;\n};\n\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app',\n    redirectUri: ensureStringUrl(getCurrentUrl()),\n    onLoad: 'check-sso',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n    checkLoginIframe: false,\n    enableLogging: true,\n    flow: 'standard'\n};\n\nlet keycloakInstance = null;\nlet initializationState = {\n    initialized: false,\n    inProgress: false,\n    error: null\n};\n\nconst handleInitError = (error, config) => {\n    const errorDetails = {\n        message: 'Unknown error during Keycloak initialization',\n        details: 'No error object was provided',\n        config: config\n    };\n\n    if (!error) {\n        errorDetails.details = 'Initialization failed without error object';\n        return errorDetails;\n    }\n\n    try {\n        // Try to get error details from the error object\n        errorDetails.message = error.message || error.toString() || 'Unknown error';\n        errorDetails.details = error.stack || error.toString();\n        errorDetails.code = error.code;\n        \n        // Check for network errors\n        if (error.message && error.message.includes('Failed to fetch')) {\n            errorDetails.serverUnavailable = true;\n            errorDetails.suggestions = [\n                'Make sure the Keycloak server is running at ' + config.url,\n                'Check network connectivity',\n                'Verify that CORS is properly configured on the Keycloak server',\n                'Ensure the realm \"' + config.realm + '\" exists'\n            ];\n        }\n        \n        // Check for nonce errors\n        if (error.message && error.message.includes('Invalid nonce')) {\n            errorDetails.nonceError = true;\n            errorDetails.suggestions = [\n                'Clear browser cookies and local storage',\n                'Try using a different authentication flow',\n                'Check if Keycloak client has \"Standard Flow\" enabled',\n                'Verify that the redirect URI is correctly configured in Keycloak'\n            ];\n        }\n    } catch (e) {\n        errorDetails.details = 'Error object could not be processed';\n    }\n\n    // Add configuration details\n    errorDetails.config = {\n        url: ensureStringUrl(config.url),\n        realm: config.realm,\n        clientId: config.clientId,\n        redirectUri: ensureStringUrl(config.redirectUri),\n        flow: config.flow\n    };\n\n    return errorDetails;\n};\n\nconst initKeycloak = async () => {\n    if (initializationState.inProgress) {\n        throw new Error('Keycloak initialization already in progress');\n    }\n    \n    if (initializationState.initialized) {\n        return keycloakInstance;\n    }\n    \n    initializationState.inProgress = true;\n    \n    try {\n        // Clear any stale tokens from localStorage\n        const storagePrefix = `kc-callback-${keycloakConfig.clientId}`;\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key && key.startsWith(storagePrefix)) {\n                console.log('Removing stale callback data:', key);\n                localStorage.removeItem(key);\n            }\n        }\n        \n        console.log('Initializing Keycloak with config:', JSON.stringify(keycloakConfig, null, 2));\n        keycloakInstance = new Keycloak(keycloakConfig);\n        \n        // Add event listeners for debugging\n        keycloakInstance.onAuthSuccess = () => {\n            console.log('Keycloak: Authentication successful');\n        };\n        \n        keycloakInstance.onAuthError = (errorData) => {\n            console.error('Keycloak: Authentication error:', errorData);\n        };\n        \n        keycloakInstance.onTokenExpired = () => {\n            console.log('Keycloak: Token expired');\n        };\n        \n        // Ensure all URLs are strings before initialization\n        const initOptions = {\n            onLoad: 'check-sso',\n            silentCheckSsoRedirectUri: ensureStringUrl(keycloakConfig.silentCheckSsoRedirectUri),\n            pkceMethod: 'S256',\n            checkLoginIframe: false,\n            enableLogging: true,\n            flow: 'standard'\n        };\n        \n        console.log('Calling keycloak.init with options:', JSON.stringify(initOptions, null, 2));\n        const authenticated = await keycloakInstance.init(initOptions);\n        \n        console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n        initializationState.initialized = true;\n        initializationState.error = null;\n        return keycloakInstance;\n    } catch (error) {\n        console.error('Original error object:', error);\n        const processedError = handleInitError(error, keycloakConfig);\n        initializationState.error = processedError;\n        console.error('Keycloak initialization failed:', {\n            error: processedError,\n            timestamp: new Date().toISOString()\n        });\n        throw processedError;\n    } finally {\n        initializationState.inProgress = false;\n    }\n};\n\nconst getKeycloak = () => {\n    if (!initializationState.initialized) {\n        throw new Error('Keycloak has not been initialized yet');\n    }\n    return keycloakInstance;\n};\n\nconst getInitializationState = () => initializationState;\n\nexport { initKeycloak, getKeycloak, getInitializationState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}