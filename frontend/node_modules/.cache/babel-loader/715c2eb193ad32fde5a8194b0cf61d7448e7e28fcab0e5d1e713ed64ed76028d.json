{"ast":null,"code":"import Keycloak from 'keycloak-js';\nwindow.addEventListener(\"message\", event => {\n  console.log(\"ðŸ‘€ Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n  try {\n    const url = new URL(window.location.href);\n    // Remove any query parameters that might interfere with Keycloak\n    url.search = '';\n    return url.toString();\n  } catch (error) {\n    console.error('Failed to parse current URL:', error);\n    // Fallback to using origin with path\n    const origin = window.location.origin;\n    const path = window.location.pathname;\n    return `${origin}${path}`;\n  }\n};\n\n// Ensure URL is a string\nconst ensureStringUrl = url => {\n  if (typeof url === 'string') {\n    return url;\n  }\n  if (url instanceof URL) {\n    return url.toString();\n  }\n  if (typeof url === 'object' && url.origin) {\n    return `${url.origin}${url.pathname || ''}`;\n  }\n  console.warn('Invalid URL format:', url);\n  return window.location.origin;\n};\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app',\n  redirectUri: window.location.origin + '/',\n  onLoad: 'login-required',\n  // Change from check-sso to login-required for testing\n  silentCheckSsoRedirectUri: window.location.origin + '/Keycloak-silent-check-sso.html',\n  pkceMethod: 'S256',\n  checkLoginIframe: false,\n  checkLoginIframeInterval: 0,\n  cors: true,\n  corsOrigins: ['http://localhost:4200']\n};\nlet keycloakInstance = null;\nlet initializationState = {\n  initialized: false,\n  inProgress: false,\n  error: null\n};\nconst handleInitError = (error, config) => {\n  const errorDetails = {\n    message: 'Unknown error during Keycloak initialization',\n    details: 'No error object was provided',\n    config: config\n  };\n  if (!error) {\n    errorDetails.details = 'Initialization failed without error object';\n    return errorDetails;\n  }\n  try {\n    // Try to get error details from the error object\n    errorDetails.message = error.message || error.toString() || 'Unknown error';\n    errorDetails.details = error.stack || error.toString();\n    errorDetails.code = error.code;\n  } catch (e) {\n    errorDetails.details = 'Error object could not be processed';\n  }\n\n  // Add configuration details\n  errorDetails.config = {\n    url: ensureStringUrl(config.url),\n    realm: config.realm,\n    clientId: config.clientId,\n    redirectUri: ensureStringUrl(config.redirectUri),\n    cors: config.cors,\n    corsOrigins: config.corsOrigins\n  };\n  return errorDetails;\n};\nconst checkKeycloakServer = async () => {\n  try {\n    // Use the well-known configuration endpoint with proper CORS handling\n    const url = `${keycloakConfig.url}/realms/${keycloakConfig.realm}/.well-known/openid-configuration`;\n    console.log('Checking Keycloak server at:', url);\n\n    // Use no-cors mode to avoid CORS errors during the check\n    const response = await fetch(url, {\n      method: 'HEAD',\n      mode: 'no-cors',\n      cache: 'no-cache'\n    });\n\n    // If we get here, the server is accessible (no-cors always returns opaque response)\n    console.log('Keycloak server check successful');\n    return true;\n  } catch (error) {\n    console.error('Error checking Keycloak server accessibility:', error);\n    return false;\n  }\n};\nconst initKeycloak = async () => {\n  if (initializationState.inProgress) {\n    throw new Error('Keycloak initialization already in progress');\n  }\n  if (initializationState.initialized) {\n    return keycloakInstance;\n  }\n  initializationState.inProgress = true;\n  try {\n    console.log('Initializing Keycloak with config:', keycloakConfig);\n\n    // Check if Keycloak server is accessible before initializing\n    const serverAccessible = await checkKeycloakServer();\n    if (!serverAccessible) {\n      const error = new Error('Keycloak server is not accessible');\n      error.serverAccessible = false;\n      error.suggestions = ['Make sure Keycloak is running on port 9090', 'Check that CORS is enabled in Keycloak for client whatsapp-clone-app', 'Verify that http://localhost:4200 is added as a valid redirect URI in Keycloak client settings', 'Ensure Web Origins in client settings includes http://localhost:4200'];\n      throw error;\n    }\n\n    // Initialize Keycloak with a promise wrapper for better error handling\n    return new Promise((resolve, reject) => {\n      keycloakInstance = new Keycloak(keycloakConfig);\n\n      // Add event listeners for debugging\n      keycloakInstance.onAuthSuccess = () => {\n        console.log('Keycloak: Authentication successful');\n      };\n      keycloakInstance.onAuthError = errorData => {\n        console.error('Keycloak: Authentication error:', errorData);\n      };\n      keycloakInstance.onTokenExpired = () => {\n        console.log('Keycloak: Token expired');\n      };\n\n      // Set a timeout to handle potential iframe issues\n      const initTimeout = setTimeout(() => {\n        const timeoutError = new Error('Keycloak initialization timed out');\n        timeoutError.suggestions = ['Disable iframe checking in Keycloak config', 'Check browser console for CORS errors', 'Verify Web Origins setting in Keycloak client', 'Try using a direct login button instead of automatic initialization'];\n        reject(timeoutError);\n      }, 10000); // 10 second timeout\n\n      keycloakInstance.init({\n        onLoad: keycloakConfig.onLoad,\n        silentCheckSsoRedirectUri: keycloakConfig.silentCheckSsoRedirectUri,\n        pkceMethod: keycloakConfig.pkceMethod,\n        checkLoginIframe: keycloakConfig.checkLoginIframe,\n        checkLoginIframeInterval: keycloakConfig.checkLoginIframeInterval,\n        enableLogging: true // Enable Keycloak's internal logging\n      }).then(authenticated => {\n        clearTimeout(initTimeout);\n        console.log('Keycloak initialized successfully. User authenticated:', authenticated);\n        initializationState.initialized = true;\n        initializationState.error = null;\n        resolve(authenticated);\n      }).catch(error => {\n        clearTimeout(initTimeout);\n        // Handle undefined error\n        let processedError = error || new Error('Unknown Keycloak initialization error');\n\n        // Handle iframe timeout error specifically\n        if (error && error.error === 'Timeout when waiting for 3rd party check iframe message.') {\n          processedError = new Error('Keycloak iframe check timed out');\n          processedError.suggestions = ['Disable iframe checking in Keycloak config', 'Check browser console for CORS errors', 'Verify Web Origins setting in Keycloak client', 'Try using a direct login button instead of automatic initialization'];\n        }\n        console.error('Keycloak initialization error:', processedError);\n        initializationState.error = processedError;\n        reject(processedError);\n      });\n    });\n  } catch (error) {\n    // Handle undefined error\n    const processedError = error || new Error('Unknown error during Keycloak initialization');\n    console.error('Error during Keycloak initialization:', processedError);\n    initializationState.error = processedError;\n    throw processedError;\n  } finally {\n    initializationState.inProgress = false;\n  }\n};\nconst getKeycloak = () => {\n  if (!initializationState.initialized) {\n    throw new Error('Keycloak has not been initialized yet');\n  }\n  return keycloakInstance;\n};\nconst getInitializationState = () => initializationState;\nexport { initKeycloak, getKeycloak, getInitializationState };","map":{"version":3,"names":["Keycloak","window","addEventListener","event","console","log","data","getCurrentUrl","url","URL","location","href","search","toString","error","origin","path","pathname","ensureStringUrl","warn","keycloakConfig","realm","clientId","redirectUri","onLoad","silentCheckSsoRedirectUri","pkceMethod","checkLoginIframe","checkLoginIframeInterval","cors","corsOrigins","keycloakInstance","initializationState","initialized","inProgress","handleInitError","config","errorDetails","message","details","stack","code","e","checkKeycloakServer","response","fetch","method","mode","cache","initKeycloak","Error","serverAccessible","suggestions","Promise","resolve","reject","onAuthSuccess","onAuthError","errorData","onTokenExpired","initTimeout","setTimeout","timeoutError","init","enableLogging","then","authenticated","clearTimeout","catch","processedError","getKeycloak","getInitializationState"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\nwindow.addEventListener(\"message\", (event) => {\n    console.log(\"ðŸ‘€ Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n    try {\n        const url = new URL(window.location.href);\n        // Remove any query parameters that might interfere with Keycloak\n        url.search = '';\n        return url.toString();\n    } catch (error) {\n        console.error('Failed to parse current URL:', error);\n        // Fallback to using origin with path\n        const origin = window.location.origin;\n        const path = window.location.pathname;\n        return `${origin}${path}`;\n    }\n};\n\n\n// Ensure URL is a string\nconst ensureStringUrl = (url) => {\n    if (typeof url === 'string') {\n        return url;\n    }\n    if (url instanceof URL) {\n        return url.toString();\n    }\n    if (typeof url === 'object' && url.origin) {\n        return `${url.origin}${url.pathname || ''}`;\n    }\n    console.warn('Invalid URL format:', url);\n    return window.location.origin;\n};\n\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app',\n    redirectUri: window.location.origin + '/',\n    onLoad: 'login-required', // Change from check-sso to login-required for testing\n    silentCheckSsoRedirectUri: window.location.origin + '/Keycloak-silent-check-sso.html',\n    pkceMethod: 'S256',\n    checkLoginIframe: false,\n    checkLoginIframeInterval: 0,\n    cors: true,\n    corsOrigins: ['http://localhost:4200']\n};\n\nlet keycloakInstance = null;\nlet initializationState = {\n    initialized: false,\n    inProgress: false,\n    error: null\n};\n\nconst handleInitError = (error, config) => {\n    const errorDetails = {\n        message: 'Unknown error during Keycloak initialization',\n        details: 'No error object was provided',\n        config: config\n    };\n\n    if (!error) {\n        errorDetails.details = 'Initialization failed without error object';\n        return errorDetails;\n    }\n\n    try {\n        // Try to get error details from the error object\n        errorDetails.message = error.message || error.toString() || 'Unknown error';\n        errorDetails.details = error.stack || error.toString();\n        errorDetails.code = error.code;\n    } catch (e) {\n        errorDetails.details = 'Error object could not be processed';\n    }\n\n    // Add configuration details\n    errorDetails.config = {\n        url: ensureStringUrl(config.url),\n        realm: config.realm,\n        clientId: config.clientId,\n        redirectUri: ensureStringUrl(config.redirectUri),\n        cors: config.cors,\n        corsOrigins: config.corsOrigins\n    };\n\n    return errorDetails;\n};\n\nconst checkKeycloakServer = async () => {\n    try {\n        // Use the well-known configuration endpoint with proper CORS handling\n        const url = `${keycloakConfig.url}/realms/${keycloakConfig.realm}/.well-known/openid-configuration`;\n        console.log('Checking Keycloak server at:', url);\n        \n        // Use no-cors mode to avoid CORS errors during the check\n        const response = await fetch(url, {\n            method: 'HEAD',\n            mode: 'no-cors',\n            cache: 'no-cache',\n        });\n        \n        // If we get here, the server is accessible (no-cors always returns opaque response)\n        console.log('Keycloak server check successful');\n        return true;\n    } catch (error) {\n        console.error('Error checking Keycloak server accessibility:', error);\n        return false;\n    }\n};\n\nconst initKeycloak = async () => {\n    if (initializationState.inProgress) {\n        throw new Error('Keycloak initialization already in progress');\n    }\n    \n    if (initializationState.initialized) {\n        return keycloakInstance;\n    }\n    \n    initializationState.inProgress = true;\n    \n    try {\n        console.log('Initializing Keycloak with config:', keycloakConfig);\n        \n        // Check if Keycloak server is accessible before initializing\n        const serverAccessible = await checkKeycloakServer();\n        if (!serverAccessible) {\n            const error = new Error('Keycloak server is not accessible');\n            error.serverAccessible = false;\n            error.suggestions = [\n                'Make sure Keycloak is running on port 9090',\n                'Check that CORS is enabled in Keycloak for client whatsapp-clone-app',\n                'Verify that http://localhost:4200 is added as a valid redirect URI in Keycloak client settings',\n                'Ensure Web Origins in client settings includes http://localhost:4200'\n            ];\n            throw error;\n        }\n\n        // Initialize Keycloak with a promise wrapper for better error handling\n        return new Promise((resolve, reject) => {\n            keycloakInstance = new Keycloak(keycloakConfig);\n            \n            // Add event listeners for debugging\n            keycloakInstance.onAuthSuccess = () => {\n                console.log('Keycloak: Authentication successful');\n            };\n            \n            keycloakInstance.onAuthError = (errorData) => {\n                console.error('Keycloak: Authentication error:', errorData);\n            };\n            \n            keycloakInstance.onTokenExpired = () => {\n                console.log('Keycloak: Token expired');\n            };\n            \n            // Set a timeout to handle potential iframe issues\n            const initTimeout = setTimeout(() => {\n                const timeoutError = new Error('Keycloak initialization timed out');\n                timeoutError.suggestions = [\n                    'Disable iframe checking in Keycloak config',\n                    'Check browser console for CORS errors',\n                    'Verify Web Origins setting in Keycloak client',\n                    'Try using a direct login button instead of automatic initialization'\n                ];\n                reject(timeoutError);\n            }, 10000); // 10 second timeout\n            \n            keycloakInstance.init({\n                onLoad: keycloakConfig.onLoad,\n                silentCheckSsoRedirectUri: keycloakConfig.silentCheckSsoRedirectUri,\n                pkceMethod: keycloakConfig.pkceMethod,\n                checkLoginIframe: keycloakConfig.checkLoginIframe,\n                checkLoginIframeInterval: keycloakConfig.checkLoginIframeInterval,\n                enableLogging: true // Enable Keycloak's internal logging\n            })\n            .then(authenticated => {\n                clearTimeout(initTimeout);\n                console.log('Keycloak initialized successfully. User authenticated:', authenticated);\n                initializationState.initialized = true;\n                initializationState.error = null;\n                resolve(authenticated);\n            })\n            .catch(error => {\n                clearTimeout(initTimeout);\n                // Handle undefined error\n                let processedError = error || new Error('Unknown Keycloak initialization error');\n                \n                // Handle iframe timeout error specifically\n                if (error && error.error === 'Timeout when waiting for 3rd party check iframe message.') {\n                    processedError = new Error('Keycloak iframe check timed out');\n                    processedError.suggestions = [\n                        'Disable iframe checking in Keycloak config',\n                        'Check browser console for CORS errors',\n                        'Verify Web Origins setting in Keycloak client',\n                        'Try using a direct login button instead of automatic initialization'\n                    ];\n                }\n                \n                console.error('Keycloak initialization error:', processedError);\n                initializationState.error = processedError;\n                reject(processedError);\n            });\n        });\n    } catch (error) {\n        // Handle undefined error\n        const processedError = error || new Error('Unknown error during Keycloak initialization');\n        console.error('Error during Keycloak initialization:', processedError);\n        initializationState.error = processedError;\n        throw processedError;\n    } finally {\n        initializationState.inProgress = false;\n    }\n};\n\nconst getKeycloak = () => {\n    if (!initializationState.initialized) {\n        throw new Error('Keycloak has not been initialized yet');\n    }\n    return keycloakInstance;\n};\n\nconst getInitializationState = () => initializationState;\n\nexport { initKeycloak, getKeycloak, getInitializationState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}