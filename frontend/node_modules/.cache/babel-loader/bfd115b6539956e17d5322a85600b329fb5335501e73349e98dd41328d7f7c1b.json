{"ast":null,"code":"import Keycloak from 'keycloak-js';\nwindow.addEventListener(\"message\", event => {\n  console.log(\"\\ud83d\\udc40 Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n  try {\n    const url = new URL(window.location.href);\n    // Remove any query parameters that might interfere with Keycloak\n    url.search = '';\n    url.hash = '';\n    return url.toString();\n  } catch (error) {\n    console.error('Failed to parse current URL:', error);\n    // Fallback to using origin with path\n    const origin = window.location.origin;\n    const path = window.location.pathname;\n    return `${origin}${path}`;\n  }\n};\n\n// Ensure URL is a string\nconst ensureStringUrl = url => {\n  if (typeof url === 'string') {\n    return url;\n  }\n  if (url instanceof URL) {\n    return url.toString();\n  }\n  if (typeof url === 'object' && url.origin) {\n    return `${url.origin}${url.pathname || ''}`;\n  }\n  console.warn('Invalid URL format:', url);\n  return window.location.origin;\n};\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app',\n  redirectUri: window.location.origin,\n  onLoad: 'login-required',\n  silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n  pkceMethod: 'S256',\n  checkLoginIframe: false,\n  enableLogging: true\n};\nlet keycloakInstance = null;\nlet initializationState = {\n  initialized: false,\n  inProgress: false,\n  error: null\n};\nconst handleInitError = (error, config) => {\n  const errorDetails = {\n    message: 'Unknown error during Keycloak initialization',\n    details: 'No error object was provided',\n    config: config\n  };\n  if (!error) {\n    errorDetails.details = 'Initialization failed without error object';\n    errorDetails.suggestions = ['Check if Keycloak server is running at ' + config.url, 'Verify that the realm \"' + config.realm + '\" exists', 'Ensure the client \"' + config.clientId + '\" is properly configured', 'Try clearing browser cookies and local storage'];\n    return errorDetails;\n  }\n  try {\n    // Try to get error details from the error object\n    errorDetails.message = error.message || error.toString() || 'Unknown error';\n    errorDetails.details = error.stack || error.toString();\n    errorDetails.code = error.code;\n\n    // Check for network errors\n    if (error.message && error.message.includes('Failed to fetch')) {\n      errorDetails.serverUnavailable = true;\n      errorDetails.suggestions = ['Make sure the Keycloak server is running at ' + config.url, 'Check network connectivity', 'Verify that CORS is properly configured on the Keycloak server', 'Ensure the realm \"' + config.realm + '\" exists'];\n    }\n\n    // Check for nonce errors\n    if (error.message && error.message.includes('Invalid nonce')) {\n      errorDetails.nonceError = true;\n      errorDetails.suggestions = ['Clear browser cookies and local storage', 'Try using a different authentication flow', 'Check if Keycloak client has \"Standard Flow\" enabled', 'Verify that the redirect URI is correctly configured in Keycloak'];\n    }\n  } catch (e) {\n    errorDetails.details = 'Error object could not be processed';\n  }\n\n  // Add configuration details\n  errorDetails.config = {\n    url: ensureStringUrl(config.url),\n    realm: config.realm,\n    clientId: config.clientId,\n    redirectUri: ensureStringUrl(config.redirectUri)\n  };\n  return errorDetails;\n};\nconst initKeycloak = async (forceLogin = false) => {\n  if (initializationState.inProgress) {\n    console.warn('Keycloak initialization already in progress');\n    return null;\n  }\n  if (initializationState.initialized && keycloakInstance) {\n    console.log('Keycloak already initialized');\n    return keycloakInstance;\n  }\n  initializationState.inProgress = true;\n  initializationState.error = null;\n  try {\n    // Clear any stale tokens from localStorage\n    try {\n      localStorage.clear();\n      sessionStorage.clear();\n      console.log('Cleared local and session storage');\n    } catch (storageError) {\n      console.warn('Failed to clear storage:', storageError);\n    }\n    console.log('Initializing Keycloak with config:', JSON.stringify(keycloakConfig, null, 2));\n\n    // Create a new Keycloak instance\n    try {\n      keycloakInstance = new Keycloak(keycloakConfig);\n    } catch (createError) {\n      console.error('Failed to create Keycloak instance:', createError);\n      throw createError;\n    }\n    if (!keycloakInstance) {\n      throw new Error('Failed to create Keycloak instance');\n    }\n\n    // Add event listeners for debugging\n    keycloakInstance.onAuthSuccess = () => {\n      console.log('Keycloak: Authentication successful');\n    };\n    keycloakInstance.onAuthError = errorData => {\n      console.error('Keycloak: Authentication error:', errorData);\n    };\n    keycloakInstance.onTokenExpired = () => {\n      console.log('Keycloak: Token expired');\n    };\n\n    // Ensure all URLs are strings before initialization\n    const initOptions = {\n      onLoad: forceLogin ? 'login-required' : 'check-sso',\n      silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n      pkceMethod: 'S256',\n      checkLoginIframe: false,\n      enableLogging: true\n    };\n    console.log('Calling keycloak.init with options:', JSON.stringify(initOptions, null, 2));\n\n    // Initialize Keycloak with a timeout\n    const initPromise = keycloakInstance.init(initOptions);\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Keycloak initialization timed out after 10 seconds')), 10000);\n    });\n    const authenticated = await Promise.race([initPromise, timeoutPromise]);\n    console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n    initializationState.initialized = true;\n    initializationState.error = null;\n    return keycloakInstance;\n  } catch (error) {\n    console.error('Original error object:', error);\n    const processedError = handleInitError(error || new Error('Unknown initialization error'), keycloakConfig);\n    initializationState.error = processedError;\n    initializationState.initialized = false;\n    console.error('Keycloak initialization failed:', {\n      error: processedError,\n      timestamp: new Date().toISOString()\n    });\n    throw processedError;\n  } finally {\n    initializationState.inProgress = false;\n  }\n};\nconst getKeycloak = () => {\n  if (!initializationState.initialized || !keycloakInstance) {\n    throw new Error('Keycloak has not been initialized yet');\n  }\n  return keycloakInstance;\n};\nconst getInitializationState = () => initializationState;\nexport { initKeycloak, getKeycloak, getInitializationState };","map":{"version":3,"names":["Keycloak","window","addEventListener","event","console","log","data","getCurrentUrl","url","URL","location","href","search","hash","toString","error","origin","path","pathname","ensureStringUrl","warn","keycloakConfig","realm","clientId","redirectUri","onLoad","silentCheckSsoRedirectUri","pkceMethod","checkLoginIframe","enableLogging","keycloakInstance","initializationState","initialized","inProgress","handleInitError","config","errorDetails","message","details","suggestions","stack","code","includes","serverUnavailable","nonceError","e","initKeycloak","forceLogin","localStorage","clear","sessionStorage","storageError","JSON","stringify","createError","Error","onAuthSuccess","onAuthError","errorData","onTokenExpired","initOptions","initPromise","init","timeoutPromise","Promise","_","reject","setTimeout","authenticated","race","processedError","timestamp","Date","toISOString","getKeycloak","getInitializationState"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\nwindow.addEventListener(\"message\", (event) => {\n    console.log(\"\\ud83d\\udc40 Message received from iframe:\", event.data);\n});\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n    try {\n        const url = new URL(window.location.href);\n        // Remove any query parameters that might interfere with Keycloak\n        url.search = '';\n        url.hash = '';\n        return url.toString();\n    } catch (error) {\n        console.error('Failed to parse current URL:', error);\n        // Fallback to using origin with path\n        const origin = window.location.origin;\n        const path = window.location.pathname;\n        return `${origin}${path}`;\n    }\n};\n\n\n// Ensure URL is a string\nconst ensureStringUrl = (url) => {\n    if (typeof url === 'string') {\n        return url;\n    }\n    if (url instanceof URL) {\n        return url.toString();\n    }\n    if (typeof url === 'object' && url.origin) {\n        return `${url.origin}${url.pathname || ''}`;\n    }\n    console.warn('Invalid URL format:', url);\n    return window.location.origin;\n};\n\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app',\n    redirectUri: window.location.origin,\n    onLoad: 'login-required',\n    silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n    checkLoginIframe: false,\n    enableLogging: true\n};\n\nlet keycloakInstance = null;\nlet initializationState = {\n    initialized: false,\n    inProgress: false,\n    error: null\n};\n\nconst handleInitError = (error, config) => {\n    const errorDetails = {\n        message: 'Unknown error during Keycloak initialization',\n        details: 'No error object was provided',\n        config: config\n    };\n\n    if (!error) {\n        errorDetails.details = 'Initialization failed without error object';\n        errorDetails.suggestions = [\n            'Check if Keycloak server is running at ' + config.url,\n            'Verify that the realm \"' + config.realm + '\" exists',\n            'Ensure the client \"' + config.clientId + '\" is properly configured',\n            'Try clearing browser cookies and local storage'\n        ];\n        return errorDetails;\n    }\n\n    try {\n        // Try to get error details from the error object\n        errorDetails.message = error.message || error.toString() || 'Unknown error';\n        errorDetails.details = error.stack || error.toString();\n        errorDetails.code = error.code;\n        \n        // Check for network errors\n        if (error.message && error.message.includes('Failed to fetch')) {\n            errorDetails.serverUnavailable = true;\n            errorDetails.suggestions = [\n                'Make sure the Keycloak server is running at ' + config.url,\n                'Check network connectivity',\n                'Verify that CORS is properly configured on the Keycloak server',\n                'Ensure the realm \"' + config.realm + '\" exists'\n            ];\n        }\n        \n        // Check for nonce errors\n        if (error.message && error.message.includes('Invalid nonce')) {\n            errorDetails.nonceError = true;\n            errorDetails.suggestions = [\n                'Clear browser cookies and local storage',\n                'Try using a different authentication flow',\n                'Check if Keycloak client has \"Standard Flow\" enabled',\n                'Verify that the redirect URI is correctly configured in Keycloak'\n            ];\n        }\n    } catch (e) {\n        errorDetails.details = 'Error object could not be processed';\n    }\n\n    // Add configuration details\n    errorDetails.config = {\n        url: ensureStringUrl(config.url),\n        realm: config.realm,\n        clientId: config.clientId,\n        redirectUri: ensureStringUrl(config.redirectUri)\n    };\n\n    return errorDetails;\n};\n\nconst initKeycloak = async (forceLogin = false) => {\n    if (initializationState.inProgress) {\n        console.warn('Keycloak initialization already in progress');\n        return null;\n    }\n    \n    if (initializationState.initialized && keycloakInstance) {\n        console.log('Keycloak already initialized');\n        return keycloakInstance;\n    }\n    \n    initializationState.inProgress = true;\n    initializationState.error = null;\n    \n    try {\n        // Clear any stale tokens from localStorage\n        try {\n            localStorage.clear();\n            sessionStorage.clear();\n            console.log('Cleared local and session storage');\n        } catch (storageError) {\n            console.warn('Failed to clear storage:', storageError);\n        }\n        \n        console.log('Initializing Keycloak with config:', JSON.stringify(keycloakConfig, null, 2));\n        \n        // Create a new Keycloak instance\n        try {\n            keycloakInstance = new Keycloak(keycloakConfig);\n        } catch (createError) {\n            console.error('Failed to create Keycloak instance:', createError);\n            throw createError;\n        }\n        \n        if (!keycloakInstance) {\n            throw new Error('Failed to create Keycloak instance');\n        }\n        \n        // Add event listeners for debugging\n        keycloakInstance.onAuthSuccess = () => {\n            console.log('Keycloak: Authentication successful');\n        };\n        \n        keycloakInstance.onAuthError = (errorData) => {\n            console.error('Keycloak: Authentication error:', errorData);\n        };\n        \n        keycloakInstance.onTokenExpired = () => {\n            console.log('Keycloak: Token expired');\n        };\n        \n        // Ensure all URLs are strings before initialization\n        const initOptions = {\n            onLoad: forceLogin ? 'login-required' : 'check-sso',\n            silentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n            pkceMethod: 'S256',\n            checkLoginIframe: false,\n            enableLogging: true\n        };\n        \n        console.log('Calling keycloak.init with options:', JSON.stringify(initOptions, null, 2));\n        \n        // Initialize Keycloak with a timeout\n        const initPromise = keycloakInstance.init(initOptions);\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Keycloak initialization timed out after 10 seconds')), 10000);\n        });\n        \n        const authenticated = await Promise.race([initPromise, timeoutPromise]);\n        \n        console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n        initializationState.initialized = true;\n        initializationState.error = null;\n        return keycloakInstance;\n    } catch (error) {\n        console.error('Original error object:', error);\n        const processedError = handleInitError(error || new Error('Unknown initialization error'), keycloakConfig);\n        initializationState.error = processedError;\n        initializationState.initialized = false;\n        console.error('Keycloak initialization failed:', {\n            error: processedError,\n            timestamp: new Date().toISOString()\n        });\n        throw processedError;\n    } finally {\n        initializationState.inProgress = false;\n    }\n};\n\nconst getKeycloak = () => {\n    if (!initializationState.initialized || !keycloakInstance) {\n        throw new Error('Keycloak has not been initialized yet');\n    }\n    return keycloakInstance;\n};\n\nconst getInitializationState = () => initializationState;\n\nexport { initKeycloak, getKeycloak, getInitializationState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}