{"ast":null,"code":"import Keycloak from 'keycloak-js';\n\n// Enable more detailed console logging for debugging\nconst enableDebugLogging = () => {\n  const originalConsoleLog = console.log;\n  const originalConsoleError = console.error;\n  console.log = (...args) => {\n    originalConsoleLog('[Keycloak Debug]', ...args);\n  };\n  console.error = (...args) => {\n    originalConsoleError('[Keycloak Error]', ...args);\n  };\n};\n\n// Enable debug logging\nenableDebugLogging();\n\n// Keycloak configuration that matches backend settings\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app'\n};\nconsole.log('Creating Keycloak instance with config:', keycloakConfig);\n\n// Initialize Keycloak instance\nlet keycloak = null;\ntry {\n  keycloak = new Keycloak(keycloakConfig);\n  console.log('Keycloak instance created successfully');\n} catch (error) {\n  console.error('Failed to create Keycloak instance:', error);\n}\n\n// Add event listeners for debugging\nif (keycloak) {\n  keycloak.onReady = authenticated => {\n    console.log('Keycloak is ready. User authenticated:', authenticated);\n  };\n  keycloak.onAuthSuccess = () => {\n    console.log('Authentication successful');\n  };\n  keycloak.onAuthError = error => {\n    console.error('Authentication error:', error);\n  };\n  keycloak.onAuthRefreshSuccess = () => {\n    console.log('Token refresh successful');\n  };\n  keycloak.onAuthRefreshError = () => {\n    console.error('Token refresh failed');\n  };\n  keycloak.onAuthLogout = () => {\n    console.log('User logged out');\n  };\n  keycloak.onTokenExpired = () => {\n    console.log('Token expired, attempting to refresh...');\n    keycloak.updateToken(30).catch(() => {\n      console.error('Failed to refresh token');\n    });\n  };\n}\n\n// Initialize Keycloak with a simpler approach\nconst initKeycloak = () => {\n  return new Promise((resolve, reject) => {\n    if (!keycloak) {\n      const error = new Error('Keycloak instance not created');\n      console.error(error);\n      reject(error);\n      return;\n    }\n    console.log('Starting Keycloak initialization...');\n\n    // Use a minimal configuration to avoid issues\n    const initOptions = {\n      onLoad: 'check-sso',\n      // Try check-sso instead of login-required\n      checkLoginIframe: false,\n      enableLogging: true\n    };\n    console.log('Init options:', initOptions);\n    keycloak.init(initOptions).then(authenticated => {\n      console.log('Keycloak initialized successfully');\n      console.log('User is authenticated:', authenticated);\n      if (authenticated) {\n        try {\n          var _keycloak$tokenParsed, _keycloak$tokenParsed2, _keycloak$tokenParsed3, _keycloak$tokenParsed4;\n          console.log('User info:', {\n            username: (_keycloak$tokenParsed = keycloak.tokenParsed) === null || _keycloak$tokenParsed === void 0 ? void 0 : _keycloak$tokenParsed.preferred_username,\n            roles: (_keycloak$tokenParsed2 = keycloak.tokenParsed) === null || _keycloak$tokenParsed2 === void 0 ? void 0 : (_keycloak$tokenParsed3 = _keycloak$tokenParsed2.realm_access) === null || _keycloak$tokenParsed3 === void 0 ? void 0 : _keycloak$tokenParsed3.roles,\n            tokenExpiration: new Date(((_keycloak$tokenParsed4 = keycloak.tokenParsed) === null || _keycloak$tokenParsed4 === void 0 ? void 0 : _keycloak$tokenParsed4.exp) * 1000).toLocaleString()\n          });\n        } catch (e) {\n          console.error('Error parsing token:', e);\n        }\n      }\n      resolve({\n        keycloak,\n        authenticated\n      });\n    }).catch(error => {\n      console.error('Failed to initialize Keycloak:', error);\n      reject(error || new Error('Unknown Keycloak initialization error'));\n    });\n  });\n};\n\n// Manual login function\nconst login = () => {\n  if (!keycloak) {\n    console.error('Cannot login: Keycloak instance not created');\n    return Promise.reject(new Error('Keycloak instance not created'));\n  }\n  console.log('Attempting manual login...');\n  return new Promise((resolve, reject) => {\n    try {\n      keycloak.login({\n        redirectUri: window.location.origin + '/'\n      }).then(resolve).catch(error => {\n        console.error('Login failed:', error);\n        reject(error || new Error('Login failed'));\n      });\n    } catch (error) {\n      console.error('Exception during login attempt:', error);\n      reject(error);\n    }\n  });\n};\n\n// Logout function\nconst logout = () => {\n  if (!keycloak) {\n    console.error('Cannot logout: Keycloak instance not created');\n    return Promise.reject(new Error('Keycloak instance not created'));\n  }\n  return keycloak.logout({\n    redirectUri: window.location.origin + '/'\n  });\n};\n\n// Check if the user has a specific role\nconst hasRole = role => {\n  if (!keycloak || !keycloak.tokenParsed) {\n    return false;\n  }\n  return keycloak.tokenParsed.realm_access && keycloak.tokenParsed.realm_access.roles.includes(role);\n};\n\n// Get the authentication token for API calls\nconst getToken = () => keycloak ? keycloak.token : null;\n\n// Update token if it's about to expire\nconst updateToken = (minValidity = 30) => {\n  if (!keycloak) {\n    return Promise.reject(new Error('Keycloak instance not created'));\n  }\n  return keycloak.updateToken(minValidity);\n};\n\n// Direct URL for manual login (backup approach)\nconst getLoginUrl = () => {\n  const redirectUri = encodeURIComponent(window.location.origin + '/');\n  return `http://localhost:9090/realms/whatsapp-clone/protocol/openid-connect/auth?client_id=whatsapp-clone-app&redirect_uri=${redirectUri}&response_type=code&scope=openid`;\n};\n\n// Function to get the Keycloak instance\nconst getKeycloak = () => keycloak;\n\n// Export functions\nexport { initKeycloak, getKeycloak, login, logout, hasRole, getToken, updateToken, getLoginUrl };","map":{"version":3,"names":["Keycloak","enableDebugLogging","originalConsoleLog","console","log","originalConsoleError","error","args","keycloakConfig","url","realm","clientId","keycloak","onReady","authenticated","onAuthSuccess","onAuthError","onAuthRefreshSuccess","onAuthRefreshError","onAuthLogout","onTokenExpired","updateToken","catch","initKeycloak","Promise","resolve","reject","Error","initOptions","onLoad","checkLoginIframe","enableLogging","init","then","_keycloak$tokenParsed","_keycloak$tokenParsed2","_keycloak$tokenParsed3","_keycloak$tokenParsed4","username","tokenParsed","preferred_username","roles","realm_access","tokenExpiration","Date","exp","toLocaleString","e","login","redirectUri","window","location","origin","logout","hasRole","role","includes","getToken","token","minValidity","getLoginUrl","encodeURIComponent","getKeycloak"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\n// Enable more detailed console logging for debugging\nconst enableDebugLogging = () => {\n    const originalConsoleLog = console.log;\n    const originalConsoleError = console.error;\n    \n    console.log = (...args) => {\n        originalConsoleLog('[Keycloak Debug]', ...args);\n    };\n    \n    console.error = (...args) => {\n        originalConsoleError('[Keycloak Error]', ...args);\n    };\n};\n\n// Enable debug logging\nenableDebugLogging();\n\n// Keycloak configuration that matches backend settings\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app'\n};\n\nconsole.log('Creating Keycloak instance with config:', keycloakConfig);\n\n// Initialize Keycloak instance\nlet keycloak = null;\n\ntry {\n    keycloak = new Keycloak(keycloakConfig);\n    console.log('Keycloak instance created successfully');\n} catch (error) {\n    console.error('Failed to create Keycloak instance:', error);\n}\n\n// Add event listeners for debugging\nif (keycloak) {\n    keycloak.onReady = (authenticated) => {\n        console.log('Keycloak is ready. User authenticated:', authenticated);\n    };\n    \n    keycloak.onAuthSuccess = () => {\n        console.log('Authentication successful');\n    };\n    \n    keycloak.onAuthError = (error) => {\n        console.error('Authentication error:', error);\n    };\n    \n    keycloak.onAuthRefreshSuccess = () => {\n        console.log('Token refresh successful');\n    };\n    \n    keycloak.onAuthRefreshError = () => {\n        console.error('Token refresh failed');\n    };\n    \n    keycloak.onAuthLogout = () => {\n        console.log('User logged out');\n    };\n    \n    keycloak.onTokenExpired = () => {\n        console.log('Token expired, attempting to refresh...');\n        keycloak.updateToken(30).catch(() => {\n            console.error('Failed to refresh token');\n        });\n    };\n}\n\n// Initialize Keycloak with a simpler approach\nconst initKeycloak = () => {\n    return new Promise((resolve, reject) => {\n        if (!keycloak) {\n            const error = new Error('Keycloak instance not created');\n            console.error(error);\n            reject(error);\n            return;\n        }\n        \n        console.log('Starting Keycloak initialization...');\n        \n        // Use a minimal configuration to avoid issues\n        const initOptions = {\n            onLoad: 'check-sso',  // Try check-sso instead of login-required\n            checkLoginIframe: false,\n            enableLogging: true\n        };\n        \n        console.log('Init options:', initOptions);\n        \n        keycloak.init(initOptions)\n            .then(authenticated => {\n                console.log('Keycloak initialized successfully');\n                console.log('User is authenticated:', authenticated);\n                \n                if (authenticated) {\n                    try {\n                        console.log('User info:', {\n                            username: keycloak.tokenParsed?.preferred_username,\n                            roles: keycloak.tokenParsed?.realm_access?.roles,\n                            tokenExpiration: new Date(keycloak.tokenParsed?.exp * 1000).toLocaleString()\n                        });\n                    } catch (e) {\n                        console.error('Error parsing token:', e);\n                    }\n                }\n                \n                resolve({ keycloak, authenticated });\n            })\n            .catch(error => {\n                console.error('Failed to initialize Keycloak:', error);\n                reject(error || new Error('Unknown Keycloak initialization error'));\n            });\n    });\n};\n\n// Manual login function\nconst login = () => {\n    if (!keycloak) {\n        console.error('Cannot login: Keycloak instance not created');\n        return Promise.reject(new Error('Keycloak instance not created'));\n    }\n    \n    console.log('Attempting manual login...');\n    \n    return new Promise((resolve, reject) => {\n        try {\n            keycloak.login({\n                redirectUri: window.location.origin + '/'\n            }).then(resolve).catch(error => {\n                console.error('Login failed:', error);\n                reject(error || new Error('Login failed'));\n            });\n        } catch (error) {\n            console.error('Exception during login attempt:', error);\n            reject(error);\n        }\n    });\n};\n\n// Logout function\nconst logout = () => {\n    if (!keycloak) {\n        console.error('Cannot logout: Keycloak instance not created');\n        return Promise.reject(new Error('Keycloak instance not created'));\n    }\n    \n    return keycloak.logout({\n        redirectUri: window.location.origin + '/'\n    });\n};\n\n// Check if the user has a specific role\nconst hasRole = (role) => {\n    if (!keycloak || !keycloak.tokenParsed) {\n        return false;\n    }\n    \n    return keycloak.tokenParsed.realm_access &&\n           keycloak.tokenParsed.realm_access.roles.includes(role);\n};\n\n// Get the authentication token for API calls\nconst getToken = () => keycloak ? keycloak.token : null;\n\n// Update token if it's about to expire\nconst updateToken = (minValidity = 30) => {\n    if (!keycloak) {\n        return Promise.reject(new Error('Keycloak instance not created'));\n    }\n    \n    return keycloak.updateToken(minValidity);\n};\n\n// Direct URL for manual login (backup approach)\nconst getLoginUrl = () => {\n    const redirectUri = encodeURIComponent(window.location.origin + '/');\n    return `http://localhost:9090/realms/whatsapp-clone/protocol/openid-connect/auth?client_id=whatsapp-clone-app&redirect_uri=${redirectUri}&response_type=code&scope=openid`;\n};\n\n// Function to get the Keycloak instance\nconst getKeycloak = () => keycloak;\n\n// Export functions\nexport {\n    initKeycloak,\n    getKeycloak,\n    login,\n    logout,\n    hasRole,\n    getToken,\n    updateToken,\n    getLoginUrl\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}