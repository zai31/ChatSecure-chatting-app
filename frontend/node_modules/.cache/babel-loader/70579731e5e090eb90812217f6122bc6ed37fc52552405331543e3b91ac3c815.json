{"ast":null,"code":"import Keycloak from 'keycloak-js';\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n  try {\n    const url = new URL(window.location.href);\n    // Remove any query parameters that might interfere with Keycloak\n    url.search = '';\n    return url.toString();\n  } catch (error) {\n    console.error('Failed to parse current URL:', error);\n    // Fallback to using origin with path\n    const origin = window.location.origin;\n    const path = window.location.pathname;\n    return `${origin}${path}`;\n  }\n};\n\n// Ensure URL is a string\nconst ensureStringUrl = url => {\n  if (typeof url === 'string') {\n    return url;\n  }\n  if (url instanceof URL) {\n    return url.toString();\n  }\n  if (typeof url === 'object' && url.origin) {\n    return `${url.origin}${url.pathname || ''}`;\n  }\n  console.warn('Invalid URL format:', url);\n  return window.location.origin;\n};\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app',\n  redirectUri: ensureStringUrl(getCurrentUrl()),\n  onLoad: 'check-sso',\n  keycloakConfigsilentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n  pkceMethod: 'S256',\n  checkLoginIframe: false,\n  cors: true,\n  corsOrigins: ['http://localhost:4200']\n};\nlet keycloakInstance = null;\nlet initializationState = {\n  initialized: false,\n  inProgress: false,\n  error: null\n};\nconst handleInitError = (error, config) => {\n  const errorDetails = {\n    message: 'Unknown error during Keycloak initialization',\n    details: 'No error object was provided',\n    config: config\n  };\n  if (!error) {\n    errorDetails.details = 'Initialization failed without error object';\n    return errorDetails;\n  }\n  try {\n    // Try to get error details from the error object\n    errorDetails.message = error.message || error.toString() || 'Unknown error';\n    errorDetails.details = error.stack || error.toString();\n    errorDetails.code = error.code;\n  } catch (e) {\n    errorDetails.details = 'Error object could not be processed';\n  }\n\n  // Add configuration details\n  errorDetails.config = {\n    url: ensureStringUrl(config.url),\n    realm: config.realm,\n    clientId: config.clientId,\n    redirectUri: ensureStringUrl(config.redirectUri),\n    cors: config.cors,\n    corsOrigins: config.corsOrigins\n  };\n  return errorDetails;\n};\nconst initKeycloak = async () => {\n  if (initializationState.inProgress) {\n    throw new Error('Keycloak initialization already in progress');\n  }\n  if (initializationState.initialized) {\n    return keycloakInstance;\n  }\n  initializationState.inProgress = true;\n  try {\n    console.log('Initializing Keycloak with config:', keycloakConfig);\n    keycloakInstance = new Keycloak(keycloakConfig);\n\n    // Add event listeners for debugging\n    keycloakInstance.onAuthSuccess = () => {\n      console.log('Keycloak: Authentication successful');\n    };\n    keycloakInstance.onAuthError = errorData => {\n      console.error('Keycloak: Authentication error:', errorData);\n    };\n    keycloakInstance.onTokenExpired = () => {\n      console.log('Keycloak: Token expired');\n    };\n\n    // Ensure all URLs are strings before initialization\n    const initOptions = {\n      onLoad: 'check-sso',\n      silentCheckSsoRedirectUri: ensureStringUrl(keycloakConfig.silentCheckSsoRedirectUri),\n      pkceMethod: 'S256',\n      checkLoginIframe: false\n    };\n    const authenticated = await keycloakInstance.init(initOptions);\n    console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n    initializationState.initialized = true;\n    initializationState.error = null;\n    return keycloakInstance;\n  } catch (error) {\n    const processedError = handleInitError(error, keycloakConfig);\n    initializationState.error = processedError;\n    console.error('Keycloak initialization failed:', {\n      error: processedError,\n      timestamp: new Date().toISOString()\n    });\n    throw processedError;\n  } finally {\n    initializationState.inProgress = false;\n  }\n};\nconst getKeycloak = () => {\n  if (!initializationState.initialized) {\n    throw new Error('Keycloak has not been initialized yet');\n  }\n  return keycloakInstance;\n};\nconst getInitializationState = () => initializationState;\nexport { initKeycloak, getKeycloak, getInitializationState };","map":{"version":3,"names":["Keycloak","getCurrentUrl","url","URL","window","location","href","search","toString","error","console","origin","path","pathname","ensureStringUrl","warn","keycloakConfig","realm","clientId","redirectUri","onLoad","keycloakConfigsilentCheckSsoRedirectUri","pkceMethod","checkLoginIframe","cors","corsOrigins","keycloakInstance","initializationState","initialized","inProgress","handleInitError","config","errorDetails","message","details","stack","code","e","initKeycloak","Error","log","onAuthSuccess","onAuthError","errorData","onTokenExpired","initOptions","silentCheckSsoRedirectUri","authenticated","init","processedError","timestamp","Date","toISOString","getKeycloak","getInitializationState"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\n// Get the current URL as a string\nconst getCurrentUrl = () => {\n    try {\n        const url = new URL(window.location.href);\n        // Remove any query parameters that might interfere with Keycloak\n        url.search = '';\n        return url.toString();\n    } catch (error) {\n        console.error('Failed to parse current URL:', error);\n        // Fallback to using origin with path\n        const origin = window.location.origin;\n        const path = window.location.pathname;\n        return `${origin}${path}`;\n    }\n};\n\n// Ensure URL is a string\nconst ensureStringUrl = (url) => {\n    if (typeof url === 'string') {\n        return url;\n    }\n    if (url instanceof URL) {\n        return url.toString();\n    }\n    if (typeof url === 'object' && url.origin) {\n        return `${url.origin}${url.pathname || ''}`;\n    }\n    console.warn('Invalid URL format:', url);\n    return window.location.origin;\n};\n\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app',\n    redirectUri: ensureStringUrl(getCurrentUrl()),\n    onLoad: 'check-sso',\n    keycloakConfigsilentCheckSsoRedirectUri: window.location.origin + '/silent-check-sso.html',\n    pkceMethod: 'S256',\n    checkLoginIframe: false,\n    cors: true,\n    corsOrigins: ['http://localhost:4200']\n};\n\nlet keycloakInstance = null;\nlet initializationState = {\n    initialized: false,\n    inProgress: false,\n    error: null\n};\n\nconst handleInitError = (error, config) => {\n    const errorDetails = {\n        message: 'Unknown error during Keycloak initialization',\n        details: 'No error object was provided',\n        config: config\n    };\n\n    if (!error) {\n        errorDetails.details = 'Initialization failed without error object';\n        return errorDetails;\n    }\n\n    try {\n        // Try to get error details from the error object\n        errorDetails.message = error.message || error.toString() || 'Unknown error';\n        errorDetails.details = error.stack || error.toString();\n        errorDetails.code = error.code;\n    } catch (e) {\n        errorDetails.details = 'Error object could not be processed';\n    }\n\n    // Add configuration details\n    errorDetails.config = {\n        url: ensureStringUrl(config.url),\n        realm: config.realm,\n        clientId: config.clientId,\n        redirectUri: ensureStringUrl(config.redirectUri),\n        cors: config.cors,\n        corsOrigins: config.corsOrigins\n    };\n\n    return errorDetails;\n};\n\nconst initKeycloak = async () => {\n    if (initializationState.inProgress) {\n        throw new Error('Keycloak initialization already in progress');\n    }\n    \n    if (initializationState.initialized) {\n        return keycloakInstance;\n    }\n    \n    initializationState.inProgress = true;\n    \n    try {\n        console.log('Initializing Keycloak with config:', keycloakConfig);\n        keycloakInstance = new Keycloak(keycloakConfig);\n        \n        // Add event listeners for debugging\n        keycloakInstance.onAuthSuccess = () => {\n            console.log('Keycloak: Authentication successful');\n        };\n        \n        keycloakInstance.onAuthError = (errorData) => {\n            console.error('Keycloak: Authentication error:', errorData);\n        };\n        \n        keycloakInstance.onTokenExpired = () => {\n            console.log('Keycloak: Token expired');\n        };\n        \n        // Ensure all URLs are strings before initialization\n        const initOptions = {\n            onLoad: 'check-sso',\n            silentCheckSsoRedirectUri: ensureStringUrl(keycloakConfig.silentCheckSsoRedirectUri),\n            pkceMethod: 'S256',\n            checkLoginIframe: false\n        };\n        \n        const authenticated = await keycloakInstance.init(initOptions);\n        \n        console.log('Keycloak initialized successfully. Authenticated:', authenticated);\n        initializationState.initialized = true;\n        initializationState.error = null;\n        return keycloakInstance;\n    } catch (error) {\n        const processedError = handleInitError(error, keycloakConfig);\n        initializationState.error = processedError;\n        console.error('Keycloak initialization failed:', {\n            error: processedError,\n            timestamp: new Date().toISOString()\n        });\n        throw processedError;\n    } finally {\n        initializationState.inProgress = false;\n    }\n};\n\nconst getKeycloak = () => {\n    if (!initializationState.initialized) {\n        throw new Error('Keycloak has not been initialized yet');\n    }\n    return keycloakInstance;\n};\n\nconst getInitializationState = () => initializationState;\n\nexport { initKeycloak, getKeycloak, getInitializationState };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}