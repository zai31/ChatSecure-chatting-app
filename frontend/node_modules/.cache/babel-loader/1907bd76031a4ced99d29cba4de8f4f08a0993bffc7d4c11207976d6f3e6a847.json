{"ast":null,"code":"import Keycloak from 'keycloak-js';\n\n// Keycloak configuration that matches backend settings\nconst keycloakConfig = {\n  url: 'http://localhost:9090',\n  realm: 'whatsapp-clone',\n  clientId: 'whatsapp-clone-app',\n  redirectUri: window.location.origin + '/',\n  checkLoginIframe: false // Disable iframe checks to avoid CORS issues\n};\n\n// Initialize Keycloak instance\nconst keycloak = new Keycloak(keycloakConfig);\n\n// Add event listeners for debugging\nkeycloak.onAuthSuccess = () => {\n  console.log('Authentication successful');\n};\nkeycloak.onAuthError = error => {\n  console.error('Authentication error:', error);\n};\nkeycloak.onTokenExpired = () => {\n  console.log('Token expired, refreshing...');\n  keycloak.updateToken(30).catch(() => {\n    console.error('Failed to refresh token');\n  });\n};\n\n// Initialize Keycloak\nconst initKeycloak = () => {\n  return new Promise((resolve, reject) => {\n    keycloak.init({\n      onLoad: 'login-required',\n      silentCheckSsoRedirectUri: window.location.origin + '/Keycloak-silent-check-sso.html',\n      pkceMethod: 'S256',\n      checkLoginIframe: false,\n      enableLogging: true\n    }).then(authenticated => {\n      console.log('Keycloak initialized successfully');\n      console.log('User is authenticated:', authenticated);\n      if (authenticated) {\n        var _keycloak$tokenParsed, _keycloak$tokenParsed2, _keycloak$tokenParsed3, _keycloak$token;\n        console.log('User info:', {\n          username: (_keycloak$tokenParsed = keycloak.tokenParsed) === null || _keycloak$tokenParsed === void 0 ? void 0 : _keycloak$tokenParsed.preferred_username,\n          roles: (_keycloak$tokenParsed2 = keycloak.tokenParsed) === null || _keycloak$tokenParsed2 === void 0 ? void 0 : (_keycloak$tokenParsed3 = _keycloak$tokenParsed2.realm_access) === null || _keycloak$tokenParsed3 === void 0 ? void 0 : _keycloak$tokenParsed3.roles,\n          token: ((_keycloak$token = keycloak.token) === null || _keycloak$token === void 0 ? void 0 : _keycloak$token.substring(0, 20)) + '...' // Log only part of the token for security\n        });\n      }\n      resolve({\n        keycloak,\n        authenticated\n      });\n    }).catch(error => {\n      console.error('Failed to initialize Keycloak:', error);\n      reject(error);\n    });\n  });\n};\n\n// Get the Keycloak instance\nconst getKeycloak = () => keycloak;\n\n// Login function that can be called directly\nconst login = () => {\n  keycloak.login({\n    redirectUri: window.location.origin + '/'\n  }).catch(error => {\n    console.error('Login failed:', error);\n  });\n};\n\n// Logout function\nconst logout = () => {\n  keycloak.logout({\n    redirectUri: window.location.origin + '/'\n  }).catch(error => {\n    console.error('Logout failed:', error);\n  });\n};\n\n// Check if the user has a specific role\nconst hasRole = role => {\n  return keycloak.tokenParsed && keycloak.tokenParsed.realm_access && keycloak.tokenParsed.realm_access.roles.includes(role);\n};\n\n// Get the authentication token for API calls\nconst getToken = () => keycloak.token;\n\n// Update token if it's about to expire\nconst updateToken = (minValidity = 30) => {\n  return keycloak.updateToken(minValidity);\n};\nexport { initKeycloak, getKeycloak, login, logout, hasRole, getToken, updateToken };","map":{"version":3,"names":["Keycloak","keycloakConfig","url","realm","clientId","redirectUri","window","location","origin","checkLoginIframe","keycloak","onAuthSuccess","console","log","onAuthError","error","onTokenExpired","updateToken","catch","initKeycloak","Promise","resolve","reject","init","onLoad","silentCheckSsoRedirectUri","pkceMethod","enableLogging","then","authenticated","_keycloak$tokenParsed","_keycloak$tokenParsed2","_keycloak$tokenParsed3","_keycloak$token","username","tokenParsed","preferred_username","roles","realm_access","token","substring","getKeycloak","login","logout","hasRole","role","includes","getToken","minValidity"],"sources":["C:/Intel/whats-clone-backEnd/frontend/src/keycloak.js"],"sourcesContent":["import Keycloak from 'keycloak-js';\n\n// Keycloak configuration that matches backend settings\nconst keycloakConfig = {\n    url: 'http://localhost:9090',\n    realm: 'whatsapp-clone',\n    clientId: 'whatsapp-clone-app',\n    redirectUri: window.location.origin + '/',\n    checkLoginIframe: false  // Disable iframe checks to avoid CORS issues\n};\n\n// Initialize Keycloak instance\nconst keycloak = new Keycloak(keycloakConfig);\n\n// Add event listeners for debugging\nkeycloak.onAuthSuccess = () => {\n    console.log('Authentication successful');\n};\n\nkeycloak.onAuthError = (error) => {\n    console.error('Authentication error:', error);\n};\n\nkeycloak.onTokenExpired = () => {\n    console.log('Token expired, refreshing...');\n    keycloak.updateToken(30).catch(() => {\n        console.error('Failed to refresh token');\n    });\n};\n\n// Initialize Keycloak\nconst initKeycloak = () => {\n    return new Promise((resolve, reject) => {\n        keycloak.init({\n            onLoad: 'login-required',\n            silentCheckSsoRedirectUri: window.location.origin + '/Keycloak-silent-check-sso.html',\n            pkceMethod: 'S256',\n            checkLoginIframe: false,\n            enableLogging: true\n        })\n        .then(authenticated => {\n            console.log('Keycloak initialized successfully');\n            console.log('User is authenticated:', authenticated);\n            \n            if (authenticated) {\n                console.log('User info:', {\n                    username: keycloak.tokenParsed?.preferred_username,\n                    roles: keycloak.tokenParsed?.realm_access?.roles,\n                    token: keycloak.token?.substring(0, 20) + '...' // Log only part of the token for security\n                });\n            }\n            \n            resolve({ keycloak, authenticated });\n        })\n        .catch(error => {\n            console.error('Failed to initialize Keycloak:', error);\n            reject(error);\n        });\n    });\n};\n\n// Get the Keycloak instance\nconst getKeycloak = () => keycloak;\n\n// Login function that can be called directly\nconst login = () => {\n    keycloak.login({\n        redirectUri: window.location.origin + '/'\n    }).catch(error => {\n        console.error('Login failed:', error);\n    });\n};\n\n// Logout function\nconst logout = () => {\n    keycloak.logout({\n        redirectUri: window.location.origin + '/'\n    }).catch(error => {\n        console.error('Logout failed:', error);\n    });\n};\n\n// Check if the user has a specific role\nconst hasRole = (role) => {\n    return keycloak.tokenParsed && \n           keycloak.tokenParsed.realm_access &&\n           keycloak.tokenParsed.realm_access.roles.includes(role);\n};\n\n// Get the authentication token for API calls\nconst getToken = () => keycloak.token;\n\n// Update token if it's about to expire\nconst updateToken = (minValidity = 30) => {\n    return keycloak.updateToken(minValidity);\n};\n\nexport {\n    initKeycloak,\n    getKeycloak,\n    login,\n    logout,\n    hasRole,\n    getToken,\n    updateToken\n};\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,aAAa;;AAElC;AACA,MAAMC,cAAc,GAAG;EACnBC,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,gBAAgB;EACvBC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,GAAG;EACzCC,gBAAgB,EAAE,KAAK,CAAE;AAC7B,CAAC;;AAED;AACA,MAAMC,QAAQ,GAAG,IAAIV,QAAQ,CAACC,cAAc,CAAC;;AAE7C;AACAS,QAAQ,CAACC,aAAa,GAAG,MAAM;EAC3BC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;AAC5C,CAAC;AAEDH,QAAQ,CAACI,WAAW,GAAIC,KAAK,IAAK;EAC9BH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;AACjD,CAAC;AAEDL,QAAQ,CAACM,cAAc,GAAG,MAAM;EAC5BJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC3CH,QAAQ,CAACO,WAAW,CAAC,EAAE,CAAC,CAACC,KAAK,CAAC,MAAM;IACjCN,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;EAC5C,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAMI,YAAY,GAAGA,CAAA,KAAM;EACvB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCZ,QAAQ,CAACa,IAAI,CAAC;MACVC,MAAM,EAAE,gBAAgB;MACxBC,yBAAyB,EAAEnB,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG,iCAAiC;MACrFkB,UAAU,EAAE,MAAM;MAClBjB,gBAAgB,EAAE,KAAK;MACvBkB,aAAa,EAAE;IACnB,CAAC,CAAC,CACDC,IAAI,CAACC,aAAa,IAAI;MACnBjB,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChDD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEgB,aAAa,CAAC;MAEpD,IAAIA,aAAa,EAAE;QAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,eAAA;QACfrB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE;UACtBqB,QAAQ,GAAAJ,qBAAA,GAAEpB,QAAQ,CAACyB,WAAW,cAAAL,qBAAA,uBAApBA,qBAAA,CAAsBM,kBAAkB;UAClDC,KAAK,GAAAN,sBAAA,GAAErB,QAAQ,CAACyB,WAAW,cAAAJ,sBAAA,wBAAAC,sBAAA,GAApBD,sBAAA,CAAsBO,YAAY,cAAAN,sBAAA,uBAAlCA,sBAAA,CAAoCK,KAAK;UAChDE,KAAK,EAAE,EAAAN,eAAA,GAAAvB,QAAQ,CAAC6B,KAAK,cAAAN,eAAA,uBAAdA,eAAA,CAAgBO,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,IAAG,KAAK,CAAC;QACpD,CAAC,CAAC;MACN;MAEAnB,OAAO,CAAC;QAAEX,QAAQ;QAAEmB;MAAc,CAAC,CAAC;IACxC,CAAC,CAAC,CACDX,KAAK,CAACH,KAAK,IAAI;MACZH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtDO,MAAM,CAACP,KAAK,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAM0B,WAAW,GAAGA,CAAA,KAAM/B,QAAQ;;AAElC;AACA,MAAMgC,KAAK,GAAGA,CAAA,KAAM;EAChBhC,QAAQ,CAACgC,KAAK,CAAC;IACXrC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG;EAC1C,CAAC,CAAC,CAACU,KAAK,CAACH,KAAK,IAAI;IACdH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;EACzC,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAM4B,MAAM,GAAGA,CAAA,KAAM;EACjBjC,QAAQ,CAACiC,MAAM,CAAC;IACZtC,WAAW,EAAEC,MAAM,CAACC,QAAQ,CAACC,MAAM,GAAG;EAC1C,CAAC,CAAC,CAACU,KAAK,CAACH,KAAK,IAAI;IACdH,OAAO,CAACG,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EAC1C,CAAC,CAAC;AACN,CAAC;;AAED;AACA,MAAM6B,OAAO,GAAIC,IAAI,IAAK;EACtB,OAAOnC,QAAQ,CAACyB,WAAW,IACpBzB,QAAQ,CAACyB,WAAW,CAACG,YAAY,IACjC5B,QAAQ,CAACyB,WAAW,CAACG,YAAY,CAACD,KAAK,CAACS,QAAQ,CAACD,IAAI,CAAC;AACjE,CAAC;;AAED;AACA,MAAME,QAAQ,GAAGA,CAAA,KAAMrC,QAAQ,CAAC6B,KAAK;;AAErC;AACA,MAAMtB,WAAW,GAAGA,CAAC+B,WAAW,GAAG,EAAE,KAAK;EACtC,OAAOtC,QAAQ,CAACO,WAAW,CAAC+B,WAAW,CAAC;AAC5C,CAAC;AAED,SACI7B,YAAY,EACZsB,WAAW,EACXC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPG,QAAQ,EACR9B,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}